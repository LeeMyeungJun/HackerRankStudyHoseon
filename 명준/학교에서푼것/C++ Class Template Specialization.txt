#include <iostream>
using namespace std;
enum class Fruit { apple, orange, pear };
enum class Color { red, green, orange };

template <typename T> struct Traits;

template <>struct Traits<Fruit>
{
    private:

    public:
    static string name(int num)
    {
         
        if(Fruit::apple == (Fruit)num)
        {
            return "apple";
        }
        else if(Fruit::orange == (Fruit)num)
        {
            return "orange";
        }
        else if(Fruit::pear == (Fruit)num)
        {
            return "pear";
        }
        return "unknown";
    }

};

template <>struct Traits<Color>
{
    private:

    public:
    static string name(int num)
    {

        if(Color::red == (Color)num)
        {
            return "red";
        }
        else if(Color::green == (Color)num)
        {
            return "green";
        }
        else if(Color::orange == (Color)num)
        {
            return "orange";
        }
        return "unknown";
    }

};





int main()
{
	int t = 0; std::cin >> t;

    for (int i=0; i!=t; ++i) {
        int index1; std::cin >> index1;
        int index2; std::cin >> index2;
        cout << Traits<Color>::name(index1) << " ";
        cout << Traits<Fruit>::name(index2) << "\n";
    }
}
